(*
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred divisors?
 *)


let nthTriangleNumber n = 
  let rec aux ans = function 
    | current when current = 0 -> ans
    | current -> aux (ans + current) (pred current)
  in aux 0 n
;;

(* let range n = *)
  (* let rec aux n acc = if n = 0 then acc else aux (n-1) (n::acc) *)
  (* in aux n [] *)
(* ;; *)

(* let factors n = List.filter (fun x -> (n mod x) = 0) (range n);; *)

let numOfFactors n = 
  let _sqrt = truncate (sqrt (float n)) in
  let rec aux divisor factors = 
    if ((divisor = 0) && (_sqrt * _sqrt = n)) then (pred factors)
    else if (divisor = 0 && (_sqrt * _sqrt <> n)) then factors
    else if (n mod divisor = 0) then aux (pred divisor) (factors + 2)
      else  aux (pred divisor) factors
  in aux _sqrt 0
;;

let check length =
  let rec aux n =
    let t = (nthTriangleNumber n) in
    let l = numOfFactors t in
    if l > length then t
      else aux (succ n)
  in aux 1
;;

